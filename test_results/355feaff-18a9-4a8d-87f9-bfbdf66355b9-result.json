{"name": "test_buy_product1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE]' is not a valid XPath expression.\n  (Session info: chrome=107.0.5304.123)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00EDACD3+2075859]\n\tOrdinal0 [0x00E6EE61+1633889]\n\tOrdinal0 [0x00D6B7BD+571325]\n\tOrdinal0 [0x00D6E374+582516]\n\tOrdinal0 [0x00D6E225+582181]\n\tOrdinal0 [0x00D6E4C0+582848]\n\tOrdinal0 [0x00D9A9A2+764322]\n\tOrdinal0 [0x00D9AE1B+765467]\n\tOrdinal0 [0x00DCD0F2+970994]\n\tOrdinal0 [0x00DB7364+881508]\n\tOrdinal0 [0x00DCB56A+963946]\n\tOrdinal0 [0x00DB7136+880950]\n\tOrdinal0 [0x00D8FEFD+720637]\n\tOrdinal0 [0x00D90F3F+724799]\n\tGetHandleVerifier [0x0118EED2+2769538]\n\tGetHandleVerifier [0x01180D95+2711877]\n\tGetHandleVerifier [0x00F6A03A+521194]\n\tGetHandleVerifier [0x00F68DA0+516432]\n\tOrdinal0 [0x00E7682C+1665068]\n\tOrdinal0 [0x00E7B128+1683752]\n\tOrdinal0 [0x00E7B215+1683989]\n\tOrdinal0 [0x00E86484+1729668]\n\tBaseThreadInitThunk [0x75ADFEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B97BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B97B8E+238]", "trace": "@allure.description(\"Test buy product 1 online trade\")\n    def test_buy_product1():\n        driver = webdriver.Chrome(executable_path='D:\\\\Юра\\\\Тестировщик\\\\resource\\\\chromedriver.exe')\n        print(\"Start test 1\")\n    \n        mp = Main_page(driver)\n        mp.start_buy()\n    \n        sp = Smartphone_page(driver)\n>       sp.filter_product()\n\ntests\\test_buy_product.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\smartphone_page.py:199: in filter_product\n    self.click_button_buy_a33w()\npages\\smartphone_page.py:162: in click_button_buy_a33w\n    self.get_button_buy_a33w().click()\npages\\smartphone_page.py:78: in get_button_buy_a33w\n    return WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.button_buy_a33w)))\nC:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:81: in until\n    value = method(self._driver)\nC:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:312: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nC:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:856: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D739A9CB90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B97BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B97B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE]' is not a valid XPath expression.\nE         (Session info: chrome=107.0.5304.123)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00EDACD3+2075859]\nE       \tOrdinal0 [0x00E6EE61+1633889]\nE       \tOrdinal0 [0x00D6B7BD+571325]\nE       \tOrdinal0 [0x00D6E374+582516]\nE       \tOrdinal0 [0x00D6E225+582181]\nE       \tOrdinal0 [0x00D6E4C0+582848]\nE       \tOrdinal0 [0x00D9A9A2+764322]\nE       \tOrdinal0 [0x00D9AE1B+765467]\nE       \tOrdinal0 [0x00DCD0F2+970994]\nE       \tOrdinal0 [0x00DB7364+881508]\nE       \tOrdinal0 [0x00DCB56A+963946]\nE       \tOrdinal0 [0x00DB7136+880950]\nE       \tOrdinal0 [0x00D8FEFD+720637]\nE       \tOrdinal0 [0x00D90F3F+724799]\nE       \tGetHandleVerifier [0x0118EED2+2769538]\nE       \tGetHandleVerifier [0x01180D95+2711877]\nE       \tGetHandleVerifier [0x00F6A03A+521194]\nE       \tGetHandleVerifier [0x00F68DA0+516432]\nE       \tOrdinal0 [0x00E7682C+1665068]\nE       \tOrdinal0 [0x00E7B128+1683752]\nE       \tOrdinal0 [0x00E7B215+1683989]\nE       \tOrdinal0 [0x00E86484+1729668]\nE       \tBaseThreadInitThunk [0x75ADFEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B97BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B97B8E+238]\n\nC:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidSelectorException"}, "description": "Test buy product 1 online trade", "steps": [{"name": "start buy", "status": "passed", "start": 1670012217655, "stop": 1670012232884}, {"name": "filter product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//div[@class='indexGoods__item__dataCover']//a[@data-itemid='2327320'DELEEEEE]' is not a valid XPath expression.\n  (Session info: chrome=107.0.5304.123)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00EDACD3+2075859]\n\tOrdinal0 [0x00E6EE61+1633889]\n\tOrdinal0 [0x00D6B7BD+571325]\n\tOrdinal0 [0x00D6E374+582516]\n\tOrdinal0 [0x00D6E225+582181]\n\tOrdinal0 [0x00D6E4C0+582848]\n\tOrdinal0 [0x00D9A9A2+764322]\n\tOrdinal0 [0x00D9AE1B+765467]\n\tOrdinal0 [0x00DCD0F2+970994]\n\tOrdinal0 [0x00DB7364+881508]\n\tOrdinal0 [0x00DCB56A+963946]\n\tOrdinal0 [0x00DB7136+880950]\n\tOrdinal0 [0x00D8FEFD+720637]\n\tOrdinal0 [0x00D90F3F+724799]\n\tGetHandleVerifier [0x0118EED2+2769538]\n\tGetHandleVerifier [0x01180D95+2711877]\n\tGetHandleVerifier [0x00F6A03A+521194]\n\tGetHandleVerifier [0x00F68DA0+516432]\n\tOrdinal0 [0x00E7682C+1665068]\n\tOrdinal0 [0x00E7B128+1683752]\n\tOrdinal0 [0x00E7B215+1683989]\n\tOrdinal0 [0x00E86484+1729668]\n\tBaseThreadInitThunk [0x75ADFEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B97BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B97B8E+238]\n\n", "trace": "  File \"D:\\юра\\Тестировщик\\pythonProject_Q7.15\\pages\\smartphone_page.py\", line 199, in filter_product\n    self.click_button_buy_a33w()\n  File \"D:\\юра\\Тестировщик\\pythonProject_Q7.15\\pages\\smartphone_page.py\", line 162, in click_button_buy_a33w\n    self.get_button_buy_a33w().click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\юра\\Тестировщик\\pythonProject_Q7.15\\pages\\smartphone_page.py\", line 78, in get_button_buy_a33w\n    return WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, self.button_buy_a33w)))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 81, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 312, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 856, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\shumo\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1670012234919, "stop": 1670012257498}], "attachments": [{"name": "stdout", "source": "f9b69a90-1872-4ad5-8a82-549e7d8fae20-attachment.txt", "type": "text/plain"}], "start": 1670012215832, "stop": 1670012257507, "uuid": "32bee11e-9bd7-4ad3-baab-c1fac960d7a3", "historyId": "d83dd9e788d2cd8b7f89a2e2812cd1ae", "testCaseId": "2e83415b9a77fd1babf45b66f75b7e95", "fullName": "tests.test_buy_product#test_buy_product1", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "LAPTOP-DQ0BFIQ6"}, {"name": "thread", "value": "19888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}